setwd("/cloud/project/")
library(BiocManager)
library(Biostrings)

#the sliding windows similarity
HV2 <- readBStringSet("hcv.fasta",  "fasta")
shift <- 1000
sliding_window_size <- 10000
start_time <- Sys.time()
# atempt to avoid pairwiseAlignment function
#library(stringdist)
#seq_dist(subseq(HV2[[1]], start = 1, end = (1+200)), subseq(HV2[[2]], start = 1, end = (1+200)))
step <- seq(1, length(HV2[[1]]), by = shift)
seq_sim_df <- matrix(0, ncol = length(HV2)-1, nrow = length(step))
seq_sim_df <- data.frame(seq_sim_df)
for (j in 2:length(HV2)) 
  {
  seq_sim <- c()
  seq_sim_names <-c()
  for (i in step) {
    if (i+sliding_window_size <= length(HV2[[1]]))
    {
    subseq <- subseq(HV2, start = i, end = (i+sliding_window_size))
    pwA <- pairwiseAlignment(subseq[[1]], subseq[[j]])
    seq_sim[length(seq_sim)+1] <- pid(pwA)/100
    }
    else
    {
    subseq <- subseq(HV2, start = i, end = length(HV2[[1]]))
    pwA <- pairwiseAlignment(subseq[[1]], subseq[[j]])
    seq_sim_names[length(seq_sim)+1] <- i
    seq_sim[length(seq_sim)+1] <- pid(pwA)/100
    }
  }
  seq_sim_trans <- as.data.frame(seq_sim)
  seq_sim_df[ ,j-1] <- seq_sim_trans
  colnames(seq_sim_df) <- names(HV2)[2:length(HV2)]
}

#plot_ly
seq_sim_t_id <- cbind(step, seq_sim_df)
seq_sim_t_id <- as.data.frame(seq_sim_t_id)
fig <- plot_ly(seq_sim_t_id, x= ~seq_sim_t_id[,1], name = names(subseq)[2], y= ~seq_sim_t_id[,2],  
               type =  'scatter', mode = 'lines')
fig <- fig %>% layout(xaxis = list(title = "Nucleotide position"),
                      yaxis = list (title = "Sequence identity"))
for (l in 2:ncol(seq_sim_t_id)) {
  fig <- fig %>% add_trace(y = ~seq_sim_t_id[,l], name = names(subseq)[l], mode = 'lines')
}
fig
end_time <- Sys.time()
end_time - start_time
